
/*******************************************************************************
*
* File bw.c
*
* Copyright (C) 2008 Martin Luescher
*
* This software is distributed under the terms of the GNU General Public
* License (GPL)
*
* Node-to-node uni-directional bandwidth measurement
*
*******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include "mpi.h"
#include "net.h"

/*int Send_Index;

int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status)
{
	int result, my_rank;
	result = PMPI_Recv(buf, count, datatype, source, tag, comm, status);
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
	if(source < 0)
	{	
		Send_Index = status->MPI_SOURCE;
	}
	else
	{	
		Send_Index = source;
	}
	return result;
}*/

static int bw0(int buf_size,double *buf)
{
   int my_rank,i,imax,ib;
   double bsmb;
   double wt1,wt2,wdt;
   MPI_Status status;
   
   MPI_Comm_rank(MPI_COMM_WORLD,&my_rank);

   bsmb=(double)(buf_size*sizeof(double))/(1024.0*1024.0);
   imax=(int)(128.0/bsmb);
   if (imax==0)
      imax=1;
   wdt=1.0;

   for (ib=0;ib<1;imax*=2)
   {
      MPI_Barrier(MPI_COMM_WORLD);
               
      if (my_rank==0)
      {
         wt1=MPI_Wtime();      
         for (i=0;i<imax;i++)
            MPI_Send(buf,buf_size,MPI_DOUBLE,1,i,MPI_COMM_WORLD);
         for (i=0;i<imax;i++)
            MPI_Recv(buf,buf_size,MPI_DOUBLE,1,i,MPI_COMM_WORLD,
                     &status);
         wt2=MPI_Wtime();               
         wdt=wt2-wt1;
         if (wdt>=2.0)
            ib=1;
      }
      else if (my_rank==1)
      {
         for (i=0;i<imax;i++)
            MPI_Recv(buf,buf_size,MPI_DOUBLE,0,i,MPI_COMM_WORLD,
                     &status);
         for (i=0;i<imax;i++)
            MPI_Send(buf,buf_size,MPI_DOUBLE,0,i,MPI_COMM_WORLD);
      }

      MPI_Bcast(&ib,1,MPI_INT,0,MPI_COMM_WORLD);
   }

   if (my_rank==0)
      ib=(int)((double)(imax)*bsmb/wdt);

   MPI_Bcast(&ib,1,MPI_INT,0,MPI_COMM_WORLD);   
   
   return ib;
}


int main(int argc,char* argv[])
{
	FILE *flog=NULL;
	char buffer_rank[10];	

   int my_rank,no_proc;
   int max_size,buf_size,bw;
   int n,i,imax,p1,p2,p1w,p2w,p[2];
   double *buf,wt1,wt2,wdt;
   double wtmn,wtmx,wtav;
   MPI_Status status;

   MPI_Init(&argc,&argv);
   MPI_Comm_rank(MPI_COMM_WORLD,&my_rank);
   MPI_Comm_size(MPI_COMM_WORLD,&no_proc);

   max_size=1024*MAX_PACKET_SIZE;
   buf=(double*)(alloc_buffer(max_size));
   buf_size=(int)(max_size/sizeof(double));
   init_buffer(buf_size,buf);
   bw=bw0(buf_size,buf);

   if (my_rank==0)
   {
      flog=fopen("bw.log","w");
      error_root(flog==NULL,1,"main [bw.c]","Unable to open log file");

      fprintf(flog,"\n");
      fprintf(flog,"Node-to-node uni-directional bandwidth measurement\n");
      fprintf(flog,"--------------------------------------------------\n\n");
      fprintf(flog,"There are %d MPI processes.\n\n",no_proc);
      fprintf(flog,"Each entry in the table reports the measured value averaged\n"
             "over all possible pairs of nodes. In the case of the bandwidth,\n"
             "the minimal and maximal values are given in square brackets."
             "\n\n");
      fprintf(flog,"Packet [KB]  Time/Test [s]  Time/Packet [ms]  "
             "Bandwidth [MB/s]   Worst Channel\n");
      fflush(flog);

      error_root(no_proc<2,2,"main [bibw.c]",
                 "The number of processes must be at least 2 for this test");
   }

	/*sprintf(buffer_rank, "%d", my_rank);
	pFile = fopen(buffer_rank, "w");*/

   for (n=MIN_PACKET_SIZE;n<=MIN_PACKET_SIZE;n*=2)
   {
      buf_size=(int)((1024*n)/sizeof(double));
      imax=(1024*bw)/n+1;
      wtmn=0.0;
      wtmx=0.0;
      wtav=0.0;
      p1w=0;
      p2w=1;

      for (p1=0;p1<no_proc;p1++)
      {
         p[0]=p1;
         
         for (p2=(p1+1);p2<no_proc;p2++)
         {
            p[1]=p2;
            
            /*MPI_Barrier(MPI_COMM_WORLD);*/
            wt1=MPI_Wtime();
               
            if (my_rank==p1)
            {
               /*for (i=0;i<imax;i++)*/
                  MPI_Send(buf,buf_size,MPI_DOUBLE,p2,i,MPI_COMM_WORLD);
               /*for (i=0;i<imax;i++)*/
                  MPI_Recv(buf,buf_size,MPI_DOUBLE,MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,
                           &status);
                  printf("[%d]Source=%d\n", my_rank, status.MPI_SOURCE);
		       
            }
            else if (my_rank==p2)
            {
               /*for (i=0;i<imax;i++)*/
                  MPI_Recv(buf,buf_size,MPI_DOUBLE,MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,
                           &status);
                  printf("[%d]Source=%d\n", my_rank, status.MPI_SOURCE);		
               /*for (i=0;i<imax;i++)*/
                  MPI_Send(buf,buf_size,MPI_DOUBLE,p1,i,MPI_COMM_WORLD);
            }

            wt2=MPI_Wtime();               
            wdt=wt2-wt1;
            /*MPI_Barrier(MPI_COMM_WORLD);*/

            for (i=0;i<2;i++)
            {
               if (p[i]!=0)
               {
                  if (my_rank==p[i])
                     MPI_Send(buf, buf_size,MPI_DOUBLE,0,imax+i,MPI_COMM_WORLD);
                  if (my_rank==0)
                  {
                     MPI_Recv(buf, buf_size,MPI_DOUBLE,p[i],MPI_ANY_TAG,MPI_COMM_WORLD,
                              &status);
                     printf("[%d]Source=%d\n", my_rank, status.MPI_SOURCE);      
                  }
               }

               if (my_rank==0)
               {
                  if (wtmn==0.0)
                     wtmn=wdt;
                  else if (wtmn>wdt)
                     wtmn=wdt;

                  if (wtmx<wdt)
                  {
                     p1w=p1;
                     p2w=p2;
                     wtmx=wdt;
                  }

                  wtav+=wdt;
               }
            }
         }
      }
      
      if (my_rank==0)
      {
         wtav/=(double)(no_proc*(no_proc-1));
         wtmn*=0.5;
         wtmx*=0.5;
         wtav*=0.5;      

         fprintf(flog,"%6d",n);
         fprintf(flog,"          %1.1f",wtav);
         fprintf(flog,"            %.1e",1.0e3*wtav/(double)(imax));
         fprintf(flog,"        %4d [%4d,%4d]",
                (int)((double)(imax*n)/(wtav*1024.0)),
                (int)((double)(imax*n)/(wtmx*1024.0)),
                (int)((double)(imax*n)/(wtmn*1024.0)));
         fprintf(flog,"     %2d <> %2d\n",p1w,p2w);
      }
   }

   if (my_rank==0)
   {
      fprintf(flog,"\nNote: 1 KB = 1024 Byte, 1 MB = 1024 KB. The figures in\n"
             "the last column are the ranks of the MPI processes where\n"
             "the lowest bandwidth was measured.\n\n");
      fclose(flog);
   }

	/*fclose(pFile);*/

   MPI_Finalize();
   exit(0);
}
