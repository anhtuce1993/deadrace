
********************************************************************************

                       Sheikholeslami-Wohlert term

********************************************************************************

Calculation and action of the Pauli term in the O(a) improved Wilson-Dirac
operator. The check programs for the programs in the files pauli.c and
pauli_dble.c are found in the devel/nompi/sw_term directory and those for
all other programs in the devel/sw_term directory.


Files
-----

pauli.c             Basic functions for single-precision hermitian 6x6 matrices

pauli_dble.c        Basic functions for double-precision hermitian 6x6 matrices

swinit.c            Utility programs for the global and the block Pauli fields

sw_term.c           Computation of the SW term on the full lattice


Include file
------------

The file sw_term.h defines the prototypes for all externally accessible
functions that are defined in the *.c files listed above. The types
pauli, pauli_dble and u3_alg_dble are defined in su3.h.


List of functions
-----------------

void mul_pauli(pauli *m,weyl *s,weyl *r)
  Multiplies the Weyl spinor s by the matrix m and assigns the result
  to the Weyl spinor r. The source spinor is overwritten if r=s and
  otherwise left unchanged

void assign_pauli(int vol,pauli_dble *md,pauli *m)
  Assigns a field of matrices of type pauli_dble to a field of type
  pauli. The parameters are the number vol of elements in the fields
  and the starting addresses md and m

void mul_pauli_dble(pauli_dble *m,weyl_dble *s,weyl_dble *r)
  Multiplies the Weyl spinor *s by the matrix *m and assigns the result
  to the Weyl spinor *r. The source spinor is overwritten if r=s and
  otherwise left unchanged

int inv_pauli_dble(pauli_dble *m,pauli_dble *im)
  Inverts the matrix *m and assigns the result to *im. The matrix is
  overwritten if im=m and otherwise left unchanged. On exit the
  program returns 0 or 1 depending on whether the inversion was safe
  or not (in which case the calculated matrix is unusable)

double det_pauli_dble(pauli_dble *m)
  Returns the determinant of the matrix *m

void apply_sw_dble(int vol,pauli_dble *m,spinor_dble *s,spinor_dble *r)
  Applies the pauli matrix field m[2*vol] to the spinor field s[vol]
  and assigns the result to the field r[vol]. The source field is
  overwritten if r=s and otherwise left unchanged (the arrays may
  not overlap in this case)

void alloc_sw(void)
  Allocates the single-precision Pauli field sw and initializes
  the matrices to unity

void alloc_swd(void)
  Allocates the double-precision Pauli field swd and initializes
  the matrices to unity

void free_sw(void)
  Frees the single-precision Pauli field sw

void free_swd(void)
  Frees the double-precision Pauli field swd

void assign_swd2sw(void)
  Assigns the double-precision Pauli field swd to the single-precision
  field sw

int invert_swd(ptset_t set)
  Inverts the Pauli matrices in the field swd[] on the specified point
  set. The program returns 0 if all matrices could be safely inverted
  and 1 otherwise (see pauli_dble.c)

