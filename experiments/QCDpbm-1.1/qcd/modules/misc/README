
********************************************************************************

                Useful programs that don't fit anywhere else

********************************************************************************


Files
-----

cmatrix.c      Complex matrix algebra (single-precision version)

cmatrix_dble.c Complex matrix algebra (double-precision version)

su3_fcts.c     Collection of some basic programs for SU(3) vectors
               and matrices

su3_prods.c    Products of double-precision 3x3 matrices


Include file
------------

The file misc.h defines the prototypes for all externally accessible
functions that are defined in the *.c files listed above.


List of functions
-----------------

void cmat_vec(int n,complex *a,complex *v,complex *w)
  Computes w=a*v, where v and w are n-vectors and a an nxn matrix

void cmat_vec_assign(int n,complex *a,complex *v,complex *w)
  Adds a*v to w, where v and w are n-vectors and a an nxn matrix
  
void cmat_add(int n,complex *a,complex *b,complex *c)
  Computes the sum c=a+b of two nxn matrices a and b

void cmat_sub(int n,complex *a,complex *b,complex *c)
  Computes the difference c=a-b of two nxn matrices a and b

void cmat_mul(int n,complex *a,complex *b,complex *c)
  Computes the product c=a*b of two nxn matrices a and b

void cmat_dag(int n,complex *a,complex *b)
  Assigns the hermitian conjugate of a to b

void cmat_vec_dble(int n,complex_dble *a,complex_dble *v,complex_dble *w)
  Computes w=a*v, where v and w are n-vectors and a an nxn matrix

void cmat_vec_assign_dble(int n,complex_dble *a,complex_dble *v,
                          complex_dble *w)
  Adds a*v to w, where v and w are n-vectors and a an nxn matrix
  
void cmat_add_dble(int n,complex_dble *a,complex_dble *b,complex_dble *c)
  Computes the sum c=a+b of two nxn matrices a and b

void cmat_sub_dble(int n,complex_dble *a,complex_dble *b,complex_dble *c)
  Computes the difference c=a-b of two nxn matrices a and b

void cmat_mul_dble(int n,complex_dble *a,complex_dble *b,complex_dble *c)
  Computes the product c=a*b of two nxn matrices a and b

void cmat_dag_dble(int n,complex_dble *a,complex_dble *b)
  Assigns the hermitian conjugate of a to b

int cmat_inv_dble(int n,complex_dble *a,complex_dble *b,double *k)
  Computes the inverse b of the nxn matrix a, using Householder
  reflections. The Frobenius condition number k of a is also computed.
  A non-zero return value indicates that the input matrix was found to
  be singular within rounding errors and that the program terminated
  prematurely 

void cross_prod(su3_vector *v1,su3_vector *v2,su3_vector *v3)
  Assigns the complex conjugate of the cross product (*v1 x *v2)
  to *v3

void cross_prod_dble(su3_vector_dble *v1,su3_vector_dble *v2,
                     su3_vector_dble *v3)
  Double-precision version of cross_prod

void project_to_su3(su3 *u)
  Projects an approximate SU(3) matrix back to SU(3)

void project_to_su3_dble(su3_dble *u)
  Double-precision version of project_to_su3

void su3xsu3(su3_dble *u,su3_dble *v,su3_dble *w)
  Computes w=u*v assuming that w is different from u

void su3dagxsu3(su3_dble *u,su3_dble *v,su3_dble *w)
  Computes w=u^dag*v assuming that w is different from u

void su3xsu3dag(su3_dble *u,su3_dble *v,su3_dble *w)
  Computes w=u*v^dag assuming that w is different from u and v

void su3dagxsu3dag(su3_dble *u,su3_dble *v,su3_dble *w)
  Computes w=u^dag*v^dag assuming that w is different from u and v

void su3xu3alg(su3_dble *u,u3_alg_dble *X,su3_dble *v)
  Computes v=u*X assuming that v is different from u

void su3dagxu3alg(su3_dble *u,u3_alg_dble *X,su3_dble *v)
  Computes v=u^dag*X assuming that v is different from u

void u3algxsu3(u3_alg_dble *X,su3_dble *u,su3_dble *v)
  Computes v=X*u assuming that v is different from u

void u3algxsu3dag(u3_alg_dble *X,su3_dble *u,su3_dble *v)
  Computes v=X*u^dag assuming that v is different from u

void prod2su3alg(su3_dble *u,su3_dble *v,su3_alg_dble *X)
  Computes the product w=u*v and assigns its traceless antihermitian
  part (1/2)*[w-w^dag-(1/3)*tr{w-w^dag}] to X

void add_prod2u3alg(su3_dble *u,su3_dble *v,u3_alg_dble *X)
  Computes the product w=u*v and adds w-w^dag to X

void rotate_su3alg(su3_dble *u,su3_alg_dble *X)
  Replaces X by u*X*u^dag. The matrix u must be unitary but its determinant
  may be different from 1
